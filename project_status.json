{
  "project_name": "mtg_price_predictor",
  "timestamp": "2025-05-10T19:00:00",
  "version": "0.1.8",
  "status": {
    "completed_modules": [
      "logger",
      "error_handler",
      "fetch_card_data",
      "fetch_market_data"
    ],
    "in_progress_module": "merge_data, clean_data",
    "pending_modules": [
      "feature_engineering",
      "train_model",
      "predict",
      "evaluate_model",
      "pipeline"
    ]
  },
  "configuration": {
    "data_paths": {
      "raw": "data/raw/",
      "processed": "data/processed/",
      "logs": "logs/"
    },
    "config_file": ".env",
    "database": {
      "type": "TimescaleDB",
      "name": "tsdb",
      "tables": {
        "market_prices": {
          "columns": [
            {"name": "id", "type": "serial4", "constraints": "NOT NULL"},
            {"name": "card_sku_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "low", "type": "int8", "constraints": "NULL"},
            {"name": "lowest_list", "type": "int8", "constraints": "NULL"},
            {"name": "market", "type": "int8", "constraints": "NULL"},
            {"name": "direct_low", "type": "int8", "constraints": "NULL"},
            {"name": "updated_at", "type": "timestamp", "constraints": "NOT NULL"}
          ]
        },
        "sales_history": {
          "columns": [
            {"name": "id", "type": "serial4", "constraints": "NOT NULL"},
            {"name": "card_sku_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "order_date", "type": "timestamp", "constraints": "NOT NULL"},
            {"name": "quantity", "type": "int2", "constraints": "NOT NULL"},
            {"name": "price", "type": "int8", "constraints": "NOT NULL"},
            {"name": "CONSTRAINT", "value": "sales_history_pkey PRIMARY KEY (id, order_date)"}
          ]
        },
        "listings": {
          "columns": [
            {"name": "id", "type": "serial4", "constraints": "NOT NULL"},
            {"name": "card_sku_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "seller_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "direct_inventory_count", "type": "int4", "constraints": "NOT NULL"},
            {"name": "shipping_price", "type": "int8", "constraints": "NOT NULL"},
            {"name": "quantity", "type": "int4", "constraints": "NOT NULL"},
            {"name": "price", "type": "int8", "constraints": "NOT NULL"},
            {"name": "updated_at", "type": "timestamp", "constraints": "NOT NULL"}
          ]
        }
      }
    },
    "api_endpoints": {
      "card_data": "https://api.scryfall.com/cards"
    }
  },
  "issues": [
    "clean_data.py error: 'card_sku_id' missing after outlier removal, fixed with robust column preservation",
    "clean_data.py triggered fetch_market_data.py in test, resolved with pre-fetched DataFrames",
    "listings table lacks explicit out-of-stock records (quantity == 0, direct_inventory_count == 0), likely due to data ingestion issue",
    "significant missing days in listings and market_prices (e.g., 2025-04-19 to 2025-04-22, 2025-05-05), requiring imputation in clean_data.py",
    "recurring TypeError: Object of type Timestamp is not JSON serializable in scratch files, resolved with timestamp string conversion",
    "high NaNs in sales_history post-merge (34.85% granular, 45.81% aggregated) due to intraday timestamp misalignment",
    "high outlier removal rate in sales_history (7.81% IQR 2.0, 4.93% IQR 3.0) removes legitimate max prices critical for prediction"
  ],
  "pipeline_status": {
    "last_run": "2025-05-10T02:59:41",
    "success": true,
    "error_log": "logs/error_log.json"
  },
  "notes": "Project aims to predict maximum sales prices for Magic: The Gathering cards using TimescaleDB data (market_prices, sales_history, listings) and card_attributes.csv. Completed fetch_card_data (merging card_list.csv and card_attributes.csv) and fetch_market_data (60-day limit, sales frequency filter >= 12, price columns corrected by dividing by 100). Updated fetch_market_data.py to simplify listings query (removed price_rank <= 5, retained sales filter, added is_low_inventory flag for direct_inventory_count <= 5). Testing merge_data via scratch_merge_data.py, producing granular (6.6M rows) and aggregated (897K rows) merges. Latest run (2025-05-10T02:59:41) succeeded, fetching 897,172 market_prices, 1,644,689 sales_history, 6,609,938 listings, and 284,714 card_attributes records, filtering 7.81% (IQR 2.0) and 4.93% (IQR 3.0) sales_history outliers.

**Outlier Removal Analysis**: High outlier removal rate (7.81%, 128,497 rows at IQR 2.0; 4.93%, 81,159 rows at IQR 3.0) in sales_history.price removes high-value prices ($16.64–$500.00, mean $32.22 for IQR 2.0; $21.83–$500.00, mean $40.03 for IQR 3.0), risking bias in max price predictions. No low-value outliers removed (e.g., $0.25 for a $25 card), as lower bounds are negative due to skewness. Sample high outliers ($19.98–$66.81, e.g., card_sku_id 4881973: $50.95) align with high-value cards in sample_aggregated (e.g., $32.99 for 7010582), suggesting legitimate prices are flagged. IQR 3.0 reduces removals by 37%, but upper bound ($21.82) is too low for max prices up to $500. Plan: Adopt IQR 3.0 in merge_data.py, test asymmetric IQR (low: 1.5, high: 4.0), and validate removed prices against market_prices.market (e.g., > 100x deviation).

**Market NaNs**: Aggregated market column shows 0 NaNs, as missing days (2025-04-19 to 2025-04-22) result in absent rows, not null values, due to non-null ingestion of market (e.g., average listings price). Plan: Impute missing days in clean_data.py (carry forward market, flag is_missing_day).

**Date Normalization**: High sales_history NaNs (34.85% granular, 45.81% aggregated) result from intraday timestamps in order_date (e.g., 2025-03-11 00:00:07), market_prices.updated_at (e.g., 2025-03-12 15:13:52.455698), and listings.updated_at (e.g., 2025-03-12 10:41:51.952056). Current truncation to '%Y-%m-%d' fails due to timing differences. Sample_granular shows partial alignment (sales_price_max $0.39 for 7009269, NaNs for 7008945). Plan: Aggregate sales_history by card_sku_id and truncated date before merging, assume UTC timestamps, and fill missing sales_history days with zeros (sales_quantity = 0, sales_price_max = 0), as user confirms these reflect no sales.

**Missing Days**: Systemic gaps in market_prices (2025-04-19 to 2025-04-22) and listings (1–60 days, e.g., 2025-05-05) indicate ingestion issues. User approves filling missing sales_history days with zeros. Plan: Implement in merge_data.py for sales_history, impute market_prices and listings in clean_data.py (direct_inventory_count = 0, is_missing_day flag).

**Merge Strategy**: Granular merge (6.6M rows, 27.36% low-inventory) preserves seller variability and low-inventory signals, critical for max price prediction, unlike aggregated merge (897K rows, 17.63% low-inventory). User plans to create src/data_processing/merge_data.py post-testing for modularity. Plan: Finalize merge_data.py with granular merge, IQR 3.0, date normalization, and zero-filled sales_history days.

**Clean Data Plan**: clean_data.py will impute missing days (direct_inventory_count = 0, is_missing_day), flag sales_quantity NaNs (is_low_nan), apply IQR 3.0 or asymmetric IQR, one-hot encode rarity and condition, and keep set_name raw. Granular data (6.6M rows) may require chunking. Encoding: avoid set cardinality, explore set release date later via Scryfall.

**Next Steps**: Revise scratch_merge_data.py to aggregate sales_history by date, fill missing days with zeros, and reduce NaNs. Create merge_data.py with granular merge, then develop clean_data.py. Address ingestion issues in clean_data.py or pipeline."
}