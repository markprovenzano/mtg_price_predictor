{
  "project_name": "mtg_price_predictor",
  "timestamp": "2025-05-11T04:00:00",
  "version": "0.2.9",
  "status": {
    "completed_modules": [
      "logger",
      "error_handler",
      "fetch_card_data",
      "fetch_market_data",
      "merge_data",
      "pipeline"
    ],
    "in_progress_module": "clean_data",
    "pending_modules": [
      "feature_engineering",
      "train_model",
      "predict",
      "evaluate_model"
    ]
  },
  "configuration": {
    "data_paths": {
      "raw": "data/raw/",
      "processed": "data/processed/",
      "logs": "logs/",
      "config": "config/"
    },
    "config_file": ".env",
    "filter_file": "config/filters.json",
    "database": {
      "type": "TimescaleDB",
      "name": "tsdb",
      "tables": {
        "market_prices": {
          "columns": [
            {"name": "id", "type": "serial4", "constraints": "NOT NULL"},
            {"name": "card_sku_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "low", "type": "int8", "constraints": "NULL"},
            {"name": "lowest_list", "type": "int8", "constraints": "NULL"},
            {"name": "market", "type": "int8", "constraints": "NULL"},
            {"name": "direct_low", "type": "int8", "constraints": "NULL"},
            {"name": "updated_at", "type": "timestamp", "constraints": "NOT NULL"}
          ]
        },
        "sales_history": {
          "columns": [
            {"name": "id", "type": "serial4", "constraints": "NOT NULL"},
            {"name": "card_sku_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "order_date", "type": "timestamp", "constraints": "NOT NULL"},
            {"name": "quantity", "type": "int2", "constraints": "NOT NULL"},
            {"name": "price", "type": "int8", "constraints": "NOT NULL"},
            {"name": "CONSTRAINT", "value": "sales_history_pkey PRIMARY KEY (id, order_date)"}
          ]
        },
        "listings": {
          "columns": [
            {"name": "id", "type": "serial4", "constraints": "NOT NULL"},
            {"name": "card_sku_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "seller_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "direct_inventory_count", "type": "int4", "constraints": "NOT NULL"},
            {"name": "shipping_price", "type": "int8", "constraints": "NOT NULL"},
            {"name": "quantity", "type": "int4", "constraints": "NOT NULL"},
            {"name": "price", "type": "int8", "constraints": "NOT NULL"},
            {"name": "updated_at", "type": "timestamp", "constraints": "NOT NULL"}
          ]
        }
      }
    },
    "api_endpoints": {
      "card_data": "https://api.scryfall.com/cards"
    }
  },
  "pipeline_status": {
    "last_run": "2025-05-10T15:18:56",
    "success": false,
    "error_log": "logs/error_log.json"
  },
  "data_handling": {
    "market_prices": {
      "direct_low": {
        "description": "Lowest direct price, key max price indicator",
        "strategy": "preserve_nans",
        "method": "Flag NaNs as is_direct_low_nan, impute in clean_data.py using listings and sales_history",
        "stats": {
          "nan_count_granular": 148053,
          "nan_proportion_granular": 0.0210,
          "raw_nan_count": 361366,
          "raw_nan_proportion": 0.3957
        },
        "evaluation": "NaNs preserved for clean_data.py imputation using listings price or recent sales_history sales_price."
      },
      "market": {
        "description": "Average market price",
        "strategy": "carry_forward",
        "method": "Forward-fill and backfill per card_sku_id",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, strategy effective."
      },
      "low": {
        "description": "Lowest price",
        "strategy": "preserve_nans",
        "method": "Flag NaNs as is_low_nan, impute in clean_data.py using sales_history",
        "stats": {
          "nan_count_granular": 492,
          "nan_proportion_granular": 0.00007,
          "raw_nan_count": 4592,
          "raw_nan_proportion": 0.0050
        },
        "evaluation": "NaNs preserved for clean_data.py imputation."
      },
      "lowest_list": {
        "description": "Lowest listing price",
        "strategy": "preserve_nans",
        "method": "Flag NaNs as is_lowest_list_nan, impute in clean_data.py using sales_history",
        "stats": {
          "nan_count_granular": 4592,
          "nan_proportion_granular": 0.00065,
          "raw_nan_count": 4592,
          "raw_nan_proportion": 0.0050
        },
        "evaluation": "NaNs preserved for clean_data.py imputation."
      }
    },
    "sales_history": {
      "sales_quantity": {
        "description": "Total sales quantity per transaction",
        "strategy": "zero_fill",
        "method": "Fill missing transactions with 0",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0,
          "non_zero_sales": 4924670
        },
        "evaluation": "No NaNs, suitable for raw granularity."
      },
      "sales_price": {
        "description": "Sale price per transaction",
        "strategy": "zero_fill",
        "method": "Fill missing transactions with 0",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0,
          "non_zero_sales": 4924670,
          "correlation_with_direct_low": 0.1057
        },
        "evaluation": "No NaNs, suitable for raw granularity."
      }
    },
    "listings": {
      "price": {
        "description": "Listing price",
        "strategy": "preserve_nans",
        "method": "Leave NaNs for missing days, flagged as is_missing_day",
        "stats": {
          "nan_count_granular": 426548,
          "nan_proportion_granular": 0.0606
        },
        "evaluation": "NaNs preserved for missing days, to be handled in clean_data.py."
      },
      "quantity": {
        "description": "Listing quantity",
        "strategy": "zero_fill",
        "method": "Fill missing days with 0",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, indicates no inventory on missing days."
      },
      "direct_inventory_count": {
        "description": "Direct inventory count",
        "strategy": "zero_fill",
        "method": "Fill missing days with 0",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, suitable for inventory tracking."
      }
    },
    "card_attributes": {
      "set_name": {
        "description": "Card set name",
        "strategy": "carry_forward",
        "method": "Fill NaNs with last known value per card_sku_id",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, strategy effective."
      },
      "rarity": {
        "description": "Card rarity",
        "strategy": "carry_forward",
        "method": "Fill NaNs with last known value per card_sku_id",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, strategy effective."
      },
      "condition": {
        "description": "Card condition",
        "strategy": "carry_forward",
        "method": "Fill NaNs with last known value per card_sku_id",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, strategy effective."
      }
    }
  },
  "issues": [
    {
      "type": "operational",
      "description": "clean_data.py error: 'card_sku_id' missing after outlier removal",
      "resolution": "Fixed with robust column preservation"
    },
    {
      "type": "operational",
      "description": "clean_data.py triggered fetch_market_data.py in test",
      "resolution": "Resolved with pre-fetched DataFrames"
    },
    {
      "type": "data",
      "description": "listings table lacks explicit out-of-stock records (quantity == 0, direct_inventory_count == 0), indicating data unavailability",
      "resolution": "Handled in merge_data.py with is_missing_day flag and zero imputation"
    },
    {
      "type": "data",
      "description": "significant missing days in listings and market_prices (e.g., 2025-04-19 to 2025-04-22, 2025-05-05)",
      "resolution": "Handled in merge_data.py with is_missing_day flag and zero imputation"
    },
    {
      "type": "operational",
      "description": "recurring TypeError: Object of type Timestamp is not JSON serializable in scratch files",
      "resolution": "Resolved with timestamp string conversion"
    },
    {
      "type": "data",
      "description": "high NaNs in sales_history post-merge (34.85% granular)",
      "resolution": "Resolved in merge_data.py with date aggregation and zero-filling"
    },
    {
      "type": "data",
      "description": "high outlier removal rate in sales_history (7.81% IQR 2.0, 4.93% IQR 3.0)",
      "resolution": "Moved outlier handling to clean_data.py, flagging in merge_data.py"
    },
    {
      "type": "operational",
      "description": "pipeline.py failed due to missing pandas import",
      "resolution": "Resolved by adding import"
    },
    {
      "type": "operational",
      "description": "pipeline.py failed due to merge_data naming conflict",
      "resolution": "Resolved by renaming argument to run_merge_data"
    },
    {
      "type": "operational",
      "description": "merge_data.py failed due to KeyError: None of [Index(['quantity', 'price'], dtype='object')] are in the [columns]",
      "resolution": "Fixed by correcting sales_history column handling"
    },
    {
      "type": "operational",
      "description": "merge_data.py failed due to KeyError: 'quantity'",
      "resolution": "Fixed by renaming sales_history columns during merge"
    }
  ],
  "notes": "Project predicts maximum sales prices for Magic: The Gathering cards using TimescaleDB data (market_prices, sales_history, listings) and card_attributes.csv. Completed fetch_card_data, fetch_market_data, merge_data, and pipeline modules. fetch_market_data.py simplified listings query (removed price_rank <= 5, added is_low_inventory flag for direct_inventory_count <= 5). merge_data.py implements granular merge with a complete card_sku_id × date grid, preserving direct_low/low/lowest_list NaNs, zero-filling listings quantity and direct_inventory_count, and merging sales_history at raw granularity. Latest run (2025-05-10T15:18:56) failed due to KeyError: 'quantity', fixed in merge_data.py. Drops card_sku_ids with no direct_low data across the entire date range, logged to logs/dropped_sku_ids_<timestamp>.txt. Added config/filters.json for dynamic thresholds (outliers, inventory, query filters). Flags for clean_data.py: is_direct_low_nan, is_missing_day, is_extreme_outlier, is_all_direct_low_nan, is_low_inventory, is_low_nan, is_lowest_list_nan, is_no_recent_sales. clean_data.py will impute direct_low using listings price (mean/median) or recent sales_history sales_price, handling cases where a sale causes dropshipper out-of-stock (e.g., listings at $10/$11, $10 sale, impute $11 for next day's direct_low NaN). Samples in merge_data_diagnostic_<timestamp>.json for NaNs and outliers. Next Steps: Develop clean_data.py to impute direct_low, validate outliers, and encode features. Optimize fetch_market_data.py for speed."
}