{
  "project_name": "mtg_price_predictor",
  "timestamp": "2025-05-11T04:00:00",
  "version": "0.2.8",
  "status": {
    "completed_modules": [
      "logger",
      "error_handler",
      "fetch_card_data",
      "fetch_market_data",
      "merge_data",
      "pipeline"
    ],
    "in_progress_module": "clean_data",
    "pending_modules": [
      "feature_engineering",
      "train_model",
      "predict",
      "evaluate_model"
    ]
  },
  "configuration": {
    "data_paths": {
      "raw": "data/raw/",
      "processed": "data/processed/",
      "logs": "logs/"
    },
    "config_file": ".env",
    "database": {
      "type": "TimescaleDB",
      "name": "tsdb",
      "tables": {
        "market_prices": {
          "columns": [
            {"name": "id", "type": "serial4", "constraints": "NOT NULL"},
            {"name": "card_sku_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "low", "type": "int8", "constraints": "NULL"},
            {"name": "lowest_list", "type": "int8", "constraints": "NULL"},
            {"name": "market", "type": "int8", "constraints": "NULL"},
            {"name": "direct_low", "type": "int8", "constraints": "NULL"},
            {"name": "updated_at", "type": "timestamp", "constraints": "NOT NULL"}
          ]
        },
        "sales_history": {
          "columns": [
            {"name": "id", "type": "serial4", "constraints": "NOT NULL"},
            {"name": "card_sku_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "order_date", "type": "timestamp", "constraints": "NOT NULL"},
            {"name": "quantity", "type": "int2", "constraints": "NOT NULL"},
            {"name": "price", "type": "int8", "constraints": "NOT NULL"},
            {"name": "CONSTRAINT", "value": "sales_history_pkey PRIMARY KEY (id, order_date)"}
          ]
        },
        "listings": {
          "columns": [
            {"name": "id", "type": "serial4", "constraints": "NOT NULL"},
            {"name": "card_sku_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "seller_id", "type": "int4", "constraints": "NOT NULL"},
            {"name": "direct_inventory_count", "type": "int4", "constraints": "NOT NULL"},
            {"name": "shipping_price", "type": "int8", "constraints": "NOT NULL"},
            {"name": "quantity", "type": "int4", "constraints": "NOT NULL"},
            {"name": "price", "type": "int8", "constraints": "NOT NULL"},
            {"name": "updated_at", "type": "timestamp", "constraints": "NOT NULL"}
          ]
        }
      }
    },
    "api_endpoints": {
      "card_data": "https://api.scryfall.com/cards"
    }
  },
  "pipeline_status": {
    "last_run": "2025-05-10T13:57:51",
    "success": true,
    "error_log": "logs/error_log.json"
  },
  "data_handling": {
    "market_prices": {
      "direct_low": {
        "description": "Lowest direct price, key max price indicator",
        "strategy": "carry_forward",
        "method": "Fill NaNs with last known value per card_sku_id, then backfill",
        "stats": {
          "nan_count_granular": 96185,
          "nan_proportion_granular": 0.0137
        },
        "evaluation": "NaNs reduced, but 1.37% remain for card_sku_ids with no data."
      },
      "market": {
        "description": "Average market price",
        "strategy": "carry_forward",
        "method": "Fill NaNs with last known value per card_sku_id, then backfill",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, strategy effective."
      },
      "low": {
        "description": "Lowest price",
        "strategy": "carry_forward",
        "method": "Fill NaNs with last known value per card_sku_id, then backfill",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, suitable for price continuity."
      },
      "lowest_list": {
        "description": "Lowest listing price",
        "strategy": "carry_forward",
        "method": "Fill NaNs with last known value per card_sku_id, then backfill",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, strategy effective."
      }
    },
    "sales_history": {
      "sales_quantity": {
        "description": "Total sales quantity per day",
        "strategy": "current",
        "method": "Aggregate by card_sku_id and date, fill missing days with 0",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0,
          "non_zero_sales": 4899454,
          "correlation_with_direct_low": 0.0787
        },
        "evaluation": "No NaNs, sufficient for model."
      },
      "sales_price_max": {
        "description": "Maximum sale price per day",
        "strategy": "current",
        "method": "Aggregate by card_sku_id and date, fill missing days with 0",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0,
          "non_zero_sales": 4899454,
          "correlation_with_direct_low": 0.0787
        },
        "evaluation": "No NaNs, sufficient for model."
      }
    },
    "listings": {
      "price": {
        "description": "Listing price",
        "strategy": "preserve_nans",
        "method": "Leave NaNs for missing days, flagged as is_missing_day",
        "stats": {
          "nan_count_granular": 426548,
          "nan_proportion_granular": 0.0606
        },
        "evaluation": "NaNs preserved for missing days, to be handled in clean_data.py."
      },
      "quantity": {
        "description": "Listing quantity",
        "strategy": "zero_fill",
        "method": "Fill missing days with 0",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, indicates no inventory on missing days."
      },
      "direct_inventory_count": {
        "description": "Direct inventory count",
        "strategy": "zero_fill",
        "method": "Fill missing days with 0",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, suitable for inventory tracking."
      }
    },
    "card_attributes": {
      "set_name": {
        "description": "Card set name",
        "strategy": "carry_forward",
        "method": "Fill NaNs with last known value per card_sku_id",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, strategy effective."
      },
      "rarity": {
        "description": "Card rarity",
        "strategy": "carry_forward",
        "method": "Fill NaNs with last known value per card_sku_id",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, strategy effective."
      },
      "condition": {
        "description": "Card condition",
        "strategy": "carry_forward",
        "method": "Fill NaNs with last known value per card_sku_id",
        "stats": {
          "nan_count_granular": 0,
          "nan_proportion_granular": 0.0
        },
        "evaluation": "No NaNs, strategy effective."
      }
    }
  },
  "issues": [
    {
      "type": "operational",
      "description": "clean_data.py error: 'card_sku_id' missing after outlier removal",
      "resolution": "Fixed with robust column preservation"
    },
    {
      "type": "operational",
      "description": "clean_data.py triggered fetch_market_data.py in test",
      "resolution": "Resolved with pre-fetched DataFrames"
    },
    {
      "type": "data",
      "description": "listings table lacks explicit out-of-stock records (quantity == 0, direct_inventory_count == 0), indicating data unavailability",
      "resolution": "Handled in merge_data.py with is_missing_day flag and zero imputation"
    },
    {
      "type": "data",
      "description": "significant missing days in listings and market_prices (e.g., 2025-04-19 to 2025-04-22, 2025-05-05)",
      "resolution": "Handled in merge_data.py with is_missing_day flag and zero imputation"
    },
    {
      "type": "operational",
      "description": "recurring TypeError: Object of type Timestamp is not JSON serializable in scratch files",
      "resolution": "Resolved with timestamp string conversion"
    },
    {
      "type": "data",
      "description": "high NaNs in sales_history post-merge (34.85% granular)",
      "resolution": "Resolved in merge_data.py with date aggregation and zero-filling"
    },
    {
      "type": "data",
      "description": "high outlier removal rate in sales_history (7.81% IQR 2.0, 4.93% IQR 3.0)",
      "resolution": "Mitigated with asymmetric IQR (0.61% with high_multiplier=10.0)"
    },
    {
      "type": "operational",
      "description": "pipeline.py failed due to missing pandas import",
      "resolution": "Resolved by adding import"
    },
    {
      "type": "operational",
      "description": "pipeline.py failed due to merge_data naming conflict",
      "resolution": "Resolved by renaming argument to run_merge_data"
    }
  ],
  "notes": "Project predicts maximum sales prices for Magic: The Gathering cards using TimescaleDB data (market_prices, sales_history, listings) and card_attributes.csv. Completed fetch_card_data, fetch_market_data, merge_data, and pipeline modules. fetch_market_data.py simplified listings query (removed price_rank <= 5, added is_low_inventory flag for direct_inventory_count <= 5). merge_data.py implements granular merge with a complete grid of card_sku_id and dates, carrying forward market_prices, setting listings quantity and direct_inventory_count to 0 for missing days (indicating data unavailability) with an is_missing_day flag, and filling sales_history missing days with zeros (sales_quantity = 0, sales_price_max = 0). Latest merge_data.py run (2025-05-10T13:57:51) succeeded, producing 7,038,364 rows with 426,548 NaNs in listings price (6.06%) and 96,185 NaNs in direct_low (1.37%). Pipeline saves merged data to data/processed/merged_data_<timestamp>.csv. Outlier Analysis: Asymmetric IQR (low: 1.5, high: 10.0) removed 0.61% (10,256 rows, $58.15–$500.00, mean $83.22), preserving high prices. Validation flagged 41 rows > 100x direct_low (excluding direct_low == 0), saved to logs/extreme_outliers_<timestamp>.csv for review. Random samples saved to logs/random_sample_<timestamp>.csv for test cases. Direct Low Insight: 1.37% NaNs indicate card_sku_ids with no direct_low data, flagged as is_all_direct_low_nan for clean_data.py. Next Steps: Develop clean_data.py to validate outliers, impute NaNs, and encode features. Optimize fetch_market_data.py for speed."
}